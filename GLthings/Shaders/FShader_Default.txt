#version 410

in vec2 vTexCoord;
in vec3 vTangent;
in vec3 vBiTangent;
in vec4 vPosition;
in vec4 vNormal;

out vec4 fragColor;

uniform vec3 LightDir;
uniform vec3 LightColour;
uniform vec3 CameraPos;
uniform vec3 SpotLightPos;
uniform vec3 SpotLightDir;

uniform float SpotLightAngle;
uniform float SpotLightFalloff;
uniform float SpotLightCutoff;
uniform float AmbientLight;
uniform float SpecPow;
uniform float roughness;

uniform int lightType;

uniform sampler2D diffuse;
uniform sampler2D normal;
uniform sampler2D Specular;

float DirectionalLight()
{
	mat3 TBN = mat3 (normalize(vTangent), normalize(vBiTangent), normalize(vNormal));
	vec3 N = texture(normal, vTexCoord).xyz * 2 - 1;
	
	float d = max(0, dot(normalize(TBN * N), normalize(LightDir)));
	
	vec3 E = normalize(CameraPos - vPosition.xyz);
	vec3 R = reflect(-LightDir, vNormal.xyz);
	
	float s = max(0, dot(E, R));
	s = pow(s, SpecPow);
	
	if (s <= AmbientLight)
	{
		s = AmbientLight;
	}
	
	return s;
}

float SpotLight()
{
	if (acos(dot(normalize(SpotLightPos - vTexCoord), SpotLightDir)) < SpotLightAngle))
	{
		mat3 TBN = mat3 (normalize(vTangent), normalize(vBiTangent), normalize(vNormal));
		vec3 N = texture(normal, vTexCoord).xyz * 2 - 1;
		
		float d = max(0, dot(normalize(TBN * N), normalize(SpotLightPos - vPosition)));
		
		vec3 E = normalize(CameraPos - vPosition.xyz);
		vec3 R = reflect(-SpotLightPos, vNormal.xyz);
		
		float s = max(0, dot(E, R));
		s = pow(s, SpecPow);
		
		if (s <= AmbientLight)
		{
			s = AmbientLight;
		}
		
		if (acos(dot(normalize(SpotLightPos - vTexCoord), SpotLightDir)) < SpotLightAngle + SpotLightFalloff))
			s = s * 0.5f;
		}
		
		return s;
	}
	return 0.0f;
}

float OrenNayarCalc()
{
	vec3 N = texture(normal, vTexCoord).xyz * 2 - 1;
	
	vec3 E = normalize(CameraPos - vPosition.xyz);
	vec3 R = reflect(-LightDir, vNormal.xyz);
	
	float NdL = max( 0.0f, dot(N, R));
	float NdE = max( 0.0f, dot(N, E));
	
	float R2 = roughness * roughness;
	
	float A = 1.0f - 0.5f * R2 / (R2 + 0.33f);
	float B = 0.45f * R2 / (R2 + 0.09f);
	
	vec3 lightProjected = normalize(LightDir - N * NdL);
	vec3 viewProjected = normalize(E - N * NdE);
	
	float CX = max(0.0f, dot(lightProjected, viewProjected));
	
	float alpha = sin(max(acos(NdE), acos(NdL)));
	float beta = tan(min(acos(NdE), acos(NdL)));
	float DX = alpha * beta;
	
	float OrenNayar = NdL * (A + B * CX * DX);
	
	return OrenNayar;
}

void main()
{	
	fragColor = texture(diffuse, vTexCoord);
	fragColor *= vec4(LightColour * OrenNayarCalc() + LightColour * directionalLight(), 1);
}