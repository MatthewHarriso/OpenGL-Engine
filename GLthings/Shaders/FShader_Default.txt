#version 410

in vec2 vTexCoord;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;
in vec4 vPosition;

out vec4 fragColor;

uniform vec3 LightDir;
uniform vec3 LightColour;
uniform vec3 CameraPos;

uniform float AmbientLight;
uniform float SpecPow;
uniform float roughness;

uniform int lightType;

uniform sampler2D diffuse;
uniform sampler2D normal;
uniform sampler2D Specular;

void main()
{
	mat3 TBN = mat3 (normalize(vTangent), normalize(vBiTangent), normalize(vNormal));
	vec3 N = texture(normal, vTexCoord).xyz * 2 - 1;
	
	float d = max(0, dot(normalize(TBN * N), normalize(LightDir)));
	
	vec3 E = normalize(CameraPos - vPosition.xyz);
	vec3 R = reflect(-LightDir, vNormal.xyz);
	
	float NdL = max( 0.0f, dot(N, LightDir));
	float NdE = max( 0.0f, dot(N, E));
	
	float R2 = roughness * roughness;
	
	float A = 1.0f - 0.5f * R2 / (R2 + 0.33f);
	float B = 0.45f * R2 / (R2 + 0.09f);
	
	vec3 lightProjected = normalize(LightDir - N * NdL);
	vec3 viewProjected = normalize(E - N * NdE);
	
	float CX = max(0.0f, dot(lightProjected, viewProjected));
	
	float alpha = sin(max(acos(NdE), acos(NdL)));
	float beta = tan(min(acos(NdE), acos(NdL)));
	float DX = alpha * beta;
	
	float OrenNayar = NdL * (A + B * CX * DX);
	
	float s = pow( min(0, dot(E, R)), SpecPow);
	
	if (s <= AmbientLight)
	{
		s = AmbientLight;
	}
	
	fragColor = texture(diffuse, vTexCoord);
	fragColor *= vec4(LightColour * OrenNayar + LightColour * s, 1);
}