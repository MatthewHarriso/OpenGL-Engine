#version 410

in vec2 vTexCoord;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;
in vec4 vPosition;

out vec4 fragColor;

uniform vec3 LightDir;
uniform vec3 LightColour;
uniform vec3 CameraPos;

uniform float AmbientLight;
uniform float SpecPow;

uniform int lightType;

uniform sampler2D diffuse;
uniform sampler2D normal;
uniform sampler2D Specular;

void main()
{
	mat3 TBN = mat3 (normalize(vTangent), normalize(vBiTangent), normalize(vNormal));
	vec3 N = texture(normal, vTexCoord).xyz * 2 - 1;
	
	float d = max(0, dot(normalize(TBN * N), normalize(LightDir)));
	
	vec3 E = normalize(CameraPos - vPosition.xyz);
	vec3 R = reflect(-LightDir, vNormal.xyz);
	
	float s = pow( min(0, dot(E, R)), SpecPow);
	
	if (s <= AmbientLight)
	{
		s = AmbientLight;
	}
	
	fragColor = texture(diffuse, vTexCoord);
	fragColor = vec4(LightColour * d + LightColour * s, 1);
}